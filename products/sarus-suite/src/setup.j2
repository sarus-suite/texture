#!/usr/bin/bash

set -e

SCRIPTNAME="$(basename $0)"

THIS_GIT_TAG="{{ git_tag }}"
THIS_GIT_BRANCH="{{ git_branch }}"
THIS_GIT_COMMIT="{{ git_commit }}"

function print_help() {
  cat <<EOF

  Usage: $SCRIPTNAME <OPTIONS>
  
  Options:
    --install|-i   : install packages on the system

    --userspace|-u : setup a testing environment in userspace

EOF
}

function end() {
  local MSG="$1"
  local RC="$2"
  echo "$MSG"
  return ${RC}  
}

function fail() {
  end "$1" 1
  return $?
}

function detect_system() {
  [ ! -f /etc/os-release ] && fail "ERROR: Cannot detect linux distribution"
  . /etc/os-release

  if ( echo " $ID_LIKE " | grep -q " suse " )
  then
    OS_NAME="opensuse"
  else
    fail "ERROR: Not a suse linux system. Unsupported."  
  fi
  
  ARCH=$(uname -m)
}

function resolve_dependencies() {
  local TO_INSTALL=""
  
  if [ -z "$(which which 2>/dev/null)" ]
  then
    TO_INSTALL="which"
  fi

  if [ -n "${TO_INSTALL}" ]
  then
    zypper refresh
    zypper install -y ${TO_INSTALL}
    TO_INSTALL=""
  fi
  
  if [ -z "$(which tar 2>/dev/null)" ]
  then
    TO_INSTALL="${TO_INSTALL} tar"
  fi
  
  if [ -z "$(which gzip 2>/dev/null)" ]
  then
    TO_INSTALL="${TO_INSTALL} gzip"
  fi
  
  if [ -z "$(which createrepo 2>/dev/null)" ]
  then
    TO_INSTALL="${TO_INSTALL} createrepo_c"
  fi

  if [ -n "${TO_INSTALL}" ]
  then
    zypper refresh
    zypper install -y ${TO_INSTALL}
  fi
  
}

function parse_args() {

  [ $# -eq 0 ] && return

  case "$1" in
    "--userspace"|"-u")
      USERSPACE="yes"
      shift
      ;;
    "--install"|"-i")
      INSTALL_PACKAGES="yes"
      shift
      ;;
    "--help"|"-h")
      print_help
      exit 0      
      ;;
    *)
     echo "ERROR: unrecognized option: \"$1\""
     print_help
     exit 1
     ;;
  esac
}

function check_input() {
  if [ "$USERSPACE" == 'yes' ] && [ "$INSTALL_PACKAGES" == 'yes' ]
  then
    echo "ERROR: --userspace and --install options are mutually exclusive, choose one of the two."
    print_help
    return 1
  fi

  # Set defaults	
  if [ "$INSTALL_PACKAGES" != 'yes' ] && [ -z "${USERSPACE}" ] && [ "$UID" -ne 0 ] 
  then
    USERSPACE='yes'
  fi
  if [ "$USERSPACE" != 'yes' ] && [ -z "${INSTALL_PACKAGES}" ] && [ "$UID" -eq 0 ] 
  then
    INSTALL_PACKAGES='yes'
  fi
}

function userspace_setup() {
  ARTIFACT="sarus-suite-${OS_NAME}-${VERSION_ID}-${ARCH}-userspace.tar.gz"	
  if [ ! -f "${ARTIFACT}" ]
  then
    URL="https://github.com/sarus-suite/texture/releases/latest/download/${ARTIFACT}"
    curl -sOL ${URL}
  fi  
  tar xzf ./${ARTIFACT}
  rm -f ./${ARTIFACT}
  sarus-suite/bin/sarusmgr configure
}

function install_packages() {
  
  if [ $UID -ne 0 ]
  then
    echo "ERROR: --install requires to run as root"
    return 1
  fi	  
  
  resolve_dependencies
  
  ARTIFACT="sarus-suite-${OS_NAME}-${VERSION_ID}-${ARCH}-packages.tar.gz"	
  if [ ! -f "${ARTIFACT}" ]
  then
    URL="https://github.com/sarus-suite/texture/releases/latest/download/${ARTIFACT}"
    curl -sOL ${URL}
  fi  
  tar xzf ./${ARTIFACT}
  REPO_PATH=$(readlink -f ${PWD}/sarus-suite)
  if [ ! -d "${REPO_PATH}/repodata" ]
  then
    createrepo ${REPO_PATH}
  fi

  set +e
  zypper lr sarus-suite &>/dev/null
  REPO_EXISTS=$?
  set -e

  if [ ${REPO_EXISTS} -eq 0 ]
  then	  
    zypper modifyrepo --no-gpgcheck -f file://${REPO_PATH} sarus-suite
  else  
    zypper addrepo --no-gpgcheck -f file://${REPO_PATH} sarus-suite
  fi

  # INSTALL
  zypper install -y sarus-suite
}

detect_system
parse_args $@
check_input

if [ "$USERSPACE" == "yes" ]
then
  userspace_setup
elif [ "$INSTALL_PACKAGES" == "yes" ]
then
  install_packages
fi

